@model PagedList.IPagedList<TLAS.Models.Customer>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
<script src="~/Scripts/jquery-1.10.2.min.js"></script>

@{
    ViewBag.Title = "Customer";
}
<hr />
<div class="container">
    <div class="col-md-4">
        <h2>Customer</h2>
        <div class="table-responsive">
            @using (Html.BeginForm("Index", "Customers", FormMethod.Get))
            { <p>@Html.TextBox("SearchString", ViewBag.CurrentFilter as string) <input type="submit" value="Search" /></p> }
            <table class="table table-condensed table-bordered table-hover table-striped">
                <thead>
                    <tr class="btn-default" >
                        <th><b>@Html.ActionLink("ID", "Index", new { sortOrder = ViewBag.IdSortParm})</b></th>
                        <th><b>@Html.ActionLink("Customer Name", "Index", new { sortOrder = ViewBag.NameSortParm })</b></th>
                        <th><b>@Html.ActionLink("Phone", "Index")</b></th>
                    </tr>
                </thead>
                <tbody>
                                        @foreach (var item in Model)
                                        {
                                            <tr value="@item.CustomerID" onclick="edit('@item.CustomerID','@item.CustomerName','@item.CustomerAddress','@item.ContactName','@item.CustomerPhone','@item.CustomerMobile','@item.CustomerEmail');">
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.CustomerID)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.CustomerName)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.CustomerPhone)
                                                </td>
                                            </tr>
                                        }

                </tbody>
            </table>
            <br /> 
            Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
        </div>
    </div>

    @{
        DateTime createdDate;
        try
        {
            createdDate = Model.FirstOrDefault().CreatedDate;
        }
        catch
        {
            createdDate = System.DateTime.Now;
        }
    }

    @using (Html.BeginForm("Create", "Customers", FormMethod.Post, new { role = "form", @id = "formCustomer" }))
    {
        <div class="col-md-8">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.Label(" ", new { @id = "errorMessagesOnSave", Style = "color: red" })
            <div class="form-group ">
                <div class="btn-group col-md-offset-4">
                    <button type="button" class="btn btn-primary" onclick="clearNew();">New</button>
                    <button type="submit" class="btn btn-primary" name="save" value="save" id="save">Save</button>
                    <button type="button" class="btn btn-primary" id="delete" onclick="deleteRecord();" disabled>Delete</button>
                </div>
            </div>
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.HiddenFor(m => Model.FirstOrDefault().ModifiedDate, new { @Value = System.DateTime.Now })
                    @Html.HiddenFor(m => Model.FirstOrDefault().CreatedDate, new { @Value = createdDate })
                    @Html.HiddenFor(m => Model.FirstOrDefault().CustomerID, new {@id = "custId" })
                    @*@Html.LabelFor("","CustomerName", htmlAttributes: new { @class = "col-md-4 control-label" })*@
                    <label for="custName" class="col-md-4 control-label">Customer Name</label>
                    <div class="col-md-4">
                        @Html.EditorFor(m => Model.FirstOrDefault().CustomerName, new { htmlAttributes = new { @class = "form-control", @id = "name"} })
                        @Html.ValidationMessageFor(m => Model.FirstOrDefault().CustomerName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label for="address" class="col-md-4 control-label">Address</label>
                    <div class="col-md-4">
                        @*@Html.EditorFor(m => Model.FirstOrDefault().CustomerAddress, new { htmlAttributes = new { @class = "form-control", @id = "address" } })*@
                        @Html.TextAreaFor(m => Model.FirstOrDefault().CustomerAddress, new { @class = "form-control", @id = "address", cols = 35, @rows = 4 })
                        @Html.ValidationMessageFor(m => Model.FirstOrDefault().CustomerAddress, "", new { @class = "text-danger" })
                        
                    </div>
                </div>
                <div class="form-group">
                    <label for="contPerson" class="col-md-4 control-label">Contact Person</label>
                    <div class="col-md-4">
                        @Html.EditorFor(m => Model.FirstOrDefault().ContactName, new { htmlAttributes = new { @class = "form-control", @id = "cPerson" } })
                        @Html.ValidationMessageFor(m => Model.FirstOrDefault().ContactName, "", new { @class = "text-danger" })
                        
                    </div>
                </div>
                <div class="form-group">
                    <label for="phone" class="col-md-4 control-label">Phone</label>
                    <div class="col-md-4">
                        @Html.EditorFor(m => Model.FirstOrDefault().CustomerPhone, new { htmlAttributes = new { @class = "form-control", @id = "phone" } })
                        @Html.ValidationMessageFor(m => Model.FirstOrDefault().CustomerPhone, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label for="mobile" class="col-md-4 control-label">Mobile</label>
                    <div class="col-md-4">
                        @Html.EditorFor(m => Model.FirstOrDefault().CustomerMobile, new { htmlAttributes = new { @class = "form-control", @id = "mobile" } })
                        @Html.ValidationMessageFor(m => Model.FirstOrDefault().CustomerMobile, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label for="email" class="col-md-4 control-label">Email</label>
                    <div class="col-md-4">
                        @Html.EditorFor(m => Model.FirstOrDefault().CustomerEmail, new { htmlAttributes = new { @class = "form-control", @id = "email" } })
                        @Html.ValidationMessageFor(m => Model.FirstOrDefault().CustomerEmail,"", new { @class = "text-danger" })
                        
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script type="text/javascript">
    $(document).ready(function () {

        $("#formCustomer").submit(function (e) {
            e.preventDefault();
            debugger;
                $.ajax({
                    type: "post",
                    url: '@Url.Action("UniqueName", "Customers")',
                    data: { Name: $("#name").val() },
                    datatype: "json",
                    traditional: true
                }).done(function myfunction(data) {
                    if(data == false)
                    {
                        $("#errorMessagesOnSave").text("Customer Name is not unique");
                        return;
                    }
                    else {
                        $("#errorMessagesOnSave").text(" ");
                        $("#formCustomer").unbind('submit').submit();
                    }
                    
                })
        });
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if ($("#custId").val() == "") {
            $("#save").prop("disabled", true);
            //$("#delete").prop("disabled", true);
        }
        else {
            $("#save").prop("disabled", false);
           // $("#delete").prop("disabled", false);
        }
    });
    function edit(id, name, address, cPerson, phone, mobile, email) {
        $("#custId").val(id)
        $("#name").val(name)
        $("#address").val(address)
        $("#cPerson").val(cPerson)
        $("#phone").val(phone)
        $("#mobile").val(mobile)
        $("#email").val(email)
    }
    function clearNew() {
        $("#save").prop("disabled", false);
        $("#custId").val(0)
        $("#name").val("")
        $("#address").val("")
        $("#cPerson").val("")
        $("#phone").val("")
        $("#mobile").val("")
        $("#email").val("")
    }
    function deleteRecord() {
        var localId = $("#custId").val();
        var localName = $("#name").val();
        var r = confirm("Do you want to delete: "+localName);
        if (r == true) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("Delete", "Customers")',
                data: { id: localId },
                success: function refresh() {
                    window.location.reload(true);
                }
            });
        }
    }
</script>

